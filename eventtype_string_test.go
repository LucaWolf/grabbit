// Code generated by "stringer -type=EventType -trimprefix=Event"; DO NOT EDIT.

package grabbit

import "testing"

func TestEventType_String(t *testing.T) {
	tests := []struct {
		name string
		i    EventType
		want string
	}{
		{ "EventUp", EventUp, "Up"},
		{ "EventDown", EventDown, "Down"},
		{ "EventCannotEstablish", EventCannotEstablish, "CannotEstablish"},
		{ "EventBlocked", EventBlocked, "Blocked"},
		{ "EventUnBlocked", EventUnBlocked, "UnBlocked"},
		{ "EventClosed", EventClosed, "Closed"},
		{ "EventMessageReceived", EventMessageReceived, "MessageReceived"},
		{ "EventMessagePublished", EventMessagePublished, "MessagePublished"},
		{ "EventMessageReturned", EventMessageReturned, "MessageReturned"},
		{ "EventConfirm", EventConfirm, "Confirm"},
		{ "EventQos", EventQos, "Qos"},
		{ "EventConsume", EventConsume, "Consume"},
		{ "EventDefineTopology", EventDefineTopology, "DefineTopology"},
		{ "EventDataExhausted", EventDataExhausted, "DataExhausted"},
		{ "EventDataPartial", EventDataPartial, "DataPartial"},
		//----------------
		{ "out-of-bound-lower", EventUp - 1, "EventType(-1)"},
		{ "out-of-bound-upper", EventDataPartial + 1, "EventType(15)"},		
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.i.String(); got != tt.want {
				t.Errorf("EventType.String() = %v, want %v", got, tt.want)
			}
		})
	}
}
